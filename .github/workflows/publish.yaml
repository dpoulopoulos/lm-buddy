name: Build and Publish lm-buddy

on: 
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "dev"
      - "release/v[0-9].[0-9]"
  workflow_dispatch:

jobs:
    build_dist:
      name: Build distribution 📦
      runs-on: ubuntu-latest
      outputs:
        POETRY: ${{ env.POETRY }}
        DISTS: ${{ steps.dists.outputs.artifact-id }}
      steps:
      - uses: actions/checkout@v4
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: set up poetry
        id: setup
        run: |
          export VENV_PATH="$HOME/venv" 
          python3 -m venv $VENV_PATH 
          $VENV_PATH/bin/pip install -U pip setuptools
          $VENV_PATH/bin/pip install poetry
          export POETRY="$VENV_PATH/bin/poetry"
          $POETRY config repositories.testpypi https://test.pypi.org/legacy/
          cd "$GITHUB_WORKSPACE"
          $POETRY build
          echo "POETRY=$VENV_PATH/bin/poetry" >> "$GITHUB_OUPUT"

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v4
        id: dists
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Publish dist to test pypi
        env:
            POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.PYPI_TEST_KEY }}
            POETRY: ${{ steps.setup.outputs.POETRY }}
        if: ${{ github.event_name == 'pull_request' }}
        run: |
            env
            cd $GITHUB_WORKSPACE
            echo "$GITHUB_WORKSPACE"
            $HOME/venv/bin/poetry publish --repository testpypi
            
    
      - name: Publish dist to real pypi
        env:
            POETRY_PYPI_TOKEN: ${{ secrets.PYPI_KEY }}
            POETRY: ${{ steps.setup.outputs.POETRY }}
        if: endsWith(github.event.base_ref, 'main') == true
        run: |
            $POETRY publish --repository testpypi --build

    # github-release:
    #     name: >-
    #         Sign the Python 🐍 distribution 📦 with Sigstore
    #         and upload them to GitHub Release
    #     needs:
    #     - build_dist
    #     runs-on: ubuntu-latest
    
    #     permissions:
    #         contents: write  # IMPORTANT: mandatory for making GitHub Releases
    #         id-token: write  # IMPORTANT: mandatory for sigstore
    
    #     # should only run when commits are pushed to main and a tag is there (from above)
    #     if: endsWith(github.event.base_ref, 'main') == true
    #     env:
    #       OUTPUT1: ${{needs.build_dist.outputs.DISTS}}
    #     steps:

    #     - name: Sign the dists with Sigstore
    #       uses: sigstore/gh-action-sigstore-python@v1.2.3
    #       with:
    #           inputs: >-
    #             ./dist/*.tar.gz
    #             ./dist/*.whl

    #     - name: Create GitHub Release
    #       env:
    #           GITHUB_TOKEN: ${{ github.token }}
    #       run: >-
    #         gh release create
    #         '${{ github.ref_name }}'
    #         --repo '${{ github.repository }}'

    #     - name: Upload artifact signatures to GitHub Release
    #       env:
    #         GITHUB_TOKEN: ${{ github.token }}
    #       # Upload to GitHub Release using the `gh` CLI.
    #       # `dist/` contains the built packages, and the
    #       # sigstore-produced signatures and certificates.
    #       run: >-
    #         gh release upload
    #         '${{ github.ref_name }}' dist/**
    #         --repo '${{ github.repository }}'
        
    