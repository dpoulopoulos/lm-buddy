name: PR Checks

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "**"

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up Environment
        id: setup
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv venv
          echo "VIRTUAL_ENV=$HOME/.venv" >> $GITHUB_ENV
        continue-on-error: false

      - name: Install Package
        id: install_package
        run: |
          . .venv/bin/activate
          uv pip install "lm_buddy[dev] @ ."
        continue-on-error: false

      - name: Unit Tests
        id: unit_tests
        run: |
          . .venv/bin/activate
          pytest tests/unit
        continue-on-error: false

      - name: Integration Tests
        id: integration_tests
        run: |
          . .venv/bin/activate
          pytest tests/integration
        continue-on-error: false

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv pip install toml-cli
          uv pip install $(toml get --toml-path pyproject.toml "project.optional-dependencies.ruff[0]")
          
      - name: Linting with Ruff
        id: ruff
        run: |
          ruff --output-format=github .
        continue-on-error: false

  version:
    name: Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv pip install toml-cli

      - name: Validate Version Bump
        id: validate_version_bump
        run: |
          git fetch origin && git show origin/main:pyproject.toml > old_pyproject.toml
          OLD_VERSION=$(toml get --toml-path old_pyproject.toml.old "project.version")
          NEW_VERSION=$(toml get --toml-path pyproject.toml "project.version")
          python scripts/validate_version_bump.py $OLD_VERSION $NEW_VERSION
        continue-on-error: false
