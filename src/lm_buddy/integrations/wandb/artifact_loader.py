from typing import Protocol

import wandb


class ArtifactLoader(Protocol):
    """Base interface for using/logging artifacts.

    Note: If/when we decide to support other tracking services (e.g., MLFlow, CometML),
    this interface should be abstracted to handle the types for those respective services.
    """

    def use_artifact(self, artifact_path: str) -> wandb.Artifact:
        """Load an artifact from its full W&B path.

        If a W&B run is active, the artifact is declared as an input to the run.
        If not, the artifact is retrieved outside of the run.
        """
        pass

    def log_artifact(self, artifact: wandb.Artifact) -> wandb.Artifact:
        """Log an artifact, declaring it as an output of the currently active W&B run.

        Return the logged version of the artifact containing any additional metadata
        generated by the tracking platform.
        """
        pass


class WandbArtifactLoader:
    """Weights & Biases implementation of the `ArtifactLoader` protocol.

    This class makes external calls to the W&B API and is not suitable for test environments.
    """

    def use_artifact(self, artifact_path: str) -> wandb.Artifact:
        if wandb.run is not None:
            # Retrieves the artifact and links it as an input to the run
            return wandb.use_artifact(artifact_path)
        else:
            # Retrieves the artifact outside of the run
            api = wandb.Api()
            return api.artifact(artifact_path)

    def log_artifact(self, artifact: wandb.Artifact) -> wandb.Artifact:
        artifact = wandb.log_artifact(artifact)
        return artifact.wait()  # Wait for artifact to finish committing w/ new metadata
